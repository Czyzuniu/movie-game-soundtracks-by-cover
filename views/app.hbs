<!DOCTYPE html>
<html>
<head>
	<link rel="stylesheet" type="text/css" href="stylesheets/style.css">
	<link rel="stylesheet" type="text/css" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
	<script
	  src="https://code.jquery.com/jquery-3.3.1.min.js"
	  integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="
	  crossorigin="anonymous">
  	</script>
	<title></title>
</head>
<body id="body">
	<input type="hidden" value="{{access_token}}" id="accessToken">
	<main id="wrapper">
		<header>
			<h1>{{title}}</h1>
		</header>
		<section id="upload">
			<input type="file" name="uploadedFile" id="uploadedFile">
			<button class="btn btn-primary pull-right" id="submit" disabled>Submit</button>
		</section>
		<section id="music" class="hidden">
			
		</section>
	</main>

	<div id="options" class="hidden">
	</div>

</body>
</html>


<script type="text/javascript">
	'use strict'

	window.addEventListener('load', () => {
		const submit = window.submit
		const uploadedFile = window.uploadedFile


		uploadedFile.addEventListener('change', () => {
			if (uploadedFile.value == "") {
				submit.disabled = true
			} else {
				submit.disabled = false
			}
		})

		submit.addEventListener('click', () => {
			showWaitSpinner()
			const formData = new FormData();
			const fileField = document.querySelector("input[type='file']");

			formData.append('uploadedFile', fileField.files[0]);

			fetch('/uploadFile', {
					method: 'POST',
					body: formData
				})
			    .then(res => {
			        return res.json()
			      })
			    .then((response) => {
			    	populateStartingOptions(response.responses[0].webDetection.webEntities)
			    	hideWaitSpinner()
			    })
		})
	})



function showWaitSpinner() {
	let container = document.createElement('div')
	let spinner = document.createElement('div')
	spinner.classList.add('loader')
	spinner.id = "waitSpinner"

	container.id = 'spinnerContainer'
	container.appendChild(spinner)
	window.body.appendChild(container)

	window.wrapper.classList.toggle('blur')
}

function hideWaitSpinner() {
	let spinner = window.spinnerContainer
	if (spinner) {
		spinner.remove()
		window.wrapper.classList.toggle('blur')
	}
}


function populateStartingOptions(data) {
	window.wrapper.classList.toggle('none')
	let container = window.options;
	container.innerHTML = ''
	container.classList.toggle('hidden')

	data.forEach((item, index, data) => {
  		let button = document.createElement('button')
  		button.id = index;
  		button.className = 'btn btn-primary pull-right'
  		button.textContent = item.description
  		button.addEventListener('click', () => {

  			let data = {
  				coverName:item.description,
  				access_token:window.accessToken.value
  			}

  			fetch("/getSoundTracks", {
  				method: 'POST',
  				headers: {
        			'Accept': 'application/json',
        			'Content-Type': 'application/json'
      			},
  				body: JSON.stringify(data)
			}).then(res => {
				return res.json()
			})
			.then((response) => {
				populateAlbumOptions(response.albums.items)
			})
  		})
  		container.appendChild(button)
	});
}



function populateAlbumOptions(data) {
	let container = window.options;
	container.innerHTML = ''

	data.forEach((album) => {
		let coverContainer = document.createElement('div')
		let cover = document.createElement('img')
		cover.src =  album.images[0].url
		cover.className = 'img-thumbnail'
		coverContainer.appendChild(cover)
		let caption = document.createElement('div')
		caption.classList.add('caption')
		caption.textContent = album.name
		coverContainer.appendChild(caption)
		container.appendChild(coverContainer)


		cover.addEventListener('click', async () => {

			let data = await fetch('https://api.spotify.com/v1/albums/' + album.id, {
				method:'GET',
				headers: {
       				'Authorization': 'Bearer ' + window.accessToken.value
   				}
			})

			let albumData = await data.json()

			renderReceivedtracks(albumData.tracks.items)

		})
	})

}


async function renderReceivedtracks(data) {
	let container = window.options;
	container.innerHTML = ''

	data.forEach((track) => {

		let trackContainer = document.createElement('div')
		trackContainer.classList.add('track')

		let audio = document.createElement('audio')
		audio.style.width = '100%';
		audio.src = track.preview_url
		audio.controls = true;
		trackContainer.appendChild(audio)

		let songName = document.createElement('div')
		songName.classList.add('songName')
		songName.textContent = track.name
		trackContainer.appendChild(songName)

		container.appendChild(trackContainer)

	})
}

</script>